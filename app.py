import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de Mortalidad por Tiroides",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo principal
st.title("üìä An√°lisis de Mortalidad por Tiroides")
st.markdown("---")

# Funci√≥n para cargar datos
@st.cache_data
def cargar_datos(uploaded_file):
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        df['ano'] = pd.to_numeric(df['ano'], errors='coerce')
        df['n'] = pd.to_numeric(df['n'], errors='coerce')
        df['total'] = pd.to_numeric(df['total'], errors='coerce')
        df['dpto'] = df['dpto'].str.upper().str.strip()
        df['tasa_mortalidad'] = (df['n'] / df['total']) * 100000
        return df
    return None

# Sidebar para carga de datos
st.sidebar.header("Configuraci√≥n")
uploaded_file = st.sidebar.file_uploader("Cargar archivo CSV", type=['csv'])

if uploaded_file is not None:
    df = cargar_datos(uploaded_file)
    
    # Tabs para diferentes an√°lisis
    tab1, tab2, tab3, tab4 = st.tabs(["üìà Pron√≥sticos", "üë• Demograf√≠a", "üó∫Ô∏è An√°lisis Regional", "üìä Visualizaciones"])
    
    with tab1:
        st.header("An√°lisis de Pron√≥sticos")
        
        # Selector de a√±os para pron√≥stico
        anos_pronostico = st.slider("A√±os a pronosticar", 1, 10, 5)
        
        # An√°lisis con Prophet
        df_prophet = df.groupby('ano')['tasa_mortalidad'].mean().reset_index()
        df_prophet.columns = ['ds', 'y']
        df_prophet['ds'] = pd.to_datetime(df_prophet['ds'], format='%Y')
        
        model = Prophet(
            yearly_seasonality=True,
            weekly_seasonality=False,
            daily_seasonality=False,
            seasonality_mode='multiplicative',
            interval_width=0.95
        )
        
        with st.spinner('Calculando pron√≥sticos...'):
            model.fit(df_prophet)
            future_dates = model.make_future_dataframe(periods=anos_pronostico, freq='Y')
            forecast = model.predict(future_dates)
            
            # Gr√°fico de pron√≥stico
            fig_forecast = plt.figure(figsize=(12, 6))
            plt.plot(df_prophet['ds'], df_prophet['y'], 'ko-', label='Datos hist√≥ricos')
            plt.plot(forecast['ds'], forecast['yhat'], 'b-', label='Pron√≥stico')
            plt.fill_between(forecast['ds'], 
                           forecast['yhat_lower'], 
                           forecast['yhat_upper'],
                           color='blue', 
                           alpha=0.2, 
                           label='Intervalo de confianza 95%')
            plt.title('Pron√≥stico de Mortalidad por Tiroides')
            plt.xlabel('A√±o')
            plt.ylabel('Tasa de Mortalidad (por 100,000 habitantes)')
            plt.legend()
            st.pyplot(fig_forecast)
            
            # Tabla de pron√≥sticos
            st.subheader("Valores pronosticados")
            future_forecast = forecast[forecast['ds'] > df_prophet['ds'].max()]
            future_forecast_display = pd.DataFrame({
                'A√±o': future_forecast['ds'].dt.year,
                'Tasa Esperada': future_forecast['yhat'].round(2),
                'L√≠mite Inferior': future_forecast['yhat_lower'].round(2),
                'L√≠mite Superior': future_forecast['yhat_upper'].round(2)
            })
            st.dataframe(future_forecast_display)
    
    with tab2:
        st.header("An√°lisis Demogr√°fico")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribuci√≥n por sexo
            fig_sex = plt.figure(figsize=(8, 8))
            df['sexo'].value_counts().plot(kind='pie', autopct='%1.1f%%')
            plt.title('Distribuci√≥n por Sexo')
            st.pyplot(fig_sex)
        
        with col2:
            # Distribuci√≥n por edad
            fig_age = plt.figure(figsize=(10, 6))
            df_edad = df.groupby('gru_edad')['n'].sum().sort_index()
            df_edad.plot(kind='bar')
            plt.title('Distribuci√≥n por Grupo de Edad')
            plt.xlabel('Grupo de Edad')
            plt.ylabel('N√∫mero de Casos')
            plt.xticks(rotation=45)
            st.pyplot(fig_age)
    
    with tab3:
        st.header("An√°lisis Regional")
        
        # Selector de departamentos
        departamentos = sorted(df['dpto'].unique())
        dptos_seleccionados = st.multiselect(
            "Seleccionar departamentos para an√°lisis",
            options=departamentos,
            default=departamentos[:5]
        )
        
        if dptos_seleccionados:
            # An√°lisis por departamento
            df_filtered = df[df['dpto'].isin(dptos_seleccionados)]
            
            # Tasa de mortalidad por departamento
            fig_regional = plt.figure(figsize=(12, 6))
            for dpto in dptos_seleccionados:
                dpto_data = df_filtered[df_filtered['dpto'] == dpto]
                plt.plot(dpto_data['ano'], dpto_data['tasa_mortalidad'], 'o-', label=dpto)
            
            plt.title('Tasa de Mortalidad por Departamento')
            plt.xlabel('A√±o')
            plt.ylabel('Tasa de Mortalidad')
            plt.legend(bbox_to_anchor=(1.05, 1))
            plt.grid(True, alpha=0.3)
            st.pyplot(fig_regional)
    
    with tab4:
        st.header("Visualizaciones Detalladas")
        
        # Selector de tipo de visualizaci√≥n
        viz_type = st.selectbox(
            "Seleccionar tipo de visualizaci√≥n",
            ["Heatmap de Mortalidad", "Correlaciones", "Tendencias Temporales"]
        )
        
        if viz_type == "Heatmap de Mortalidad":
            # Heatmap de √∫ltimos 10 a√±os
            anos_max = df['ano'].max()
            df_reciente = df[df['ano'] > anos_max - 10]
            
            pivot_table = df_reciente.pivot_table(
                values='tasa_mortalidad',
                index='dpto',
                columns='ano',
                aggfunc='mean'
            )
            
            fig_heatmap = plt.figure(figsize=(12, 8))
            sns.heatmap(pivot_table, 
                       cmap='Reds',
                       annot=True,
                       fmt='.0f')
            plt.title('Tasas de Mortalidad por Departamento\n√öltimos 10 a√±os')
            st.pyplot(fig_heatmap)
            
        elif viz_type == "Correlaciones":
            # Matriz de correlaci√≥n
            columnas_numericas = ['ano', 'n', 'total', 'tasa_mortalidad']
            df_num = df[columnas_numericas]
            corr_matrix = df_num.corr()
            
            fig_corr = plt.figure(figsize=(8, 6))
            sns.heatmap(corr_matrix, 
                       annot=True,
                       cmap='coolwarm',
                       center=0,
                       fmt='.2f')
            plt.title('Matriz de Correlaci√≥n')
            st.pyplot(fig_corr)
            
        else:
            # Tendencias temporales
            fig_trend = plt.figure(figsize=(12, 6))
            df.groupby('ano')['tasa_mortalidad'].mean().plot()
            plt.title('Tendencia Temporal de la Tasa de Mortalidad')
            plt.xlabel('A√±o')
            plt.ylabel('Tasa de Mortalidad')
            plt.grid(True, alpha=0.3)
            st.pyplot(fig_trend)
    
    # Descarga de datos procesados
    st.sidebar.markdown("---")
    if st.sidebar.button("Descargar Datos Procesados"):
        csv = df.to_csv(index=False)
        st.sidebar.download_button(
            label="Confirmar Descarga",
            data=csv,
            file_name="datos_procesados.csv",
            mime="text/csv"
        )
else:
    st.info("üëÜ Por favor, carga un archivo CSV para comenzar el an√°lisis.")
    st.markdown("""
    El archivo debe contener las siguientes columnas:
    - ano: A√±o del registro
    - dpto: Departamento
    - sexo: G√©nero
    - gru_edad: Grupo de edad
    - n: N√∫mero de casos
    - total: Poblaci√≥n total
    """)